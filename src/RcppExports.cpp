// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// logit
arma::vec logit(const arma::mat& X, const arma::vec& beta);
RcppExport SEXP milr_logit(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(logit(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// getLogLikMilr
double getLogLikMilr(const arma::vec& beta, const arma::vec& y, const arma::mat& X, const arma::vec& bag);
RcppExport SEXP milr_getLogLikMilr(SEXP betaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP bagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bag(bagSEXP);
    rcpp_result_gen = Rcpp::wrap(getLogLikMilr(beta, y, X, bag));
    return rcpp_result_gen;
END_RCPP
}
// getMilrProb
arma::vec getMilrProb(const arma::vec& beta, const arma::mat& X, const arma::vec& bag);
RcppExport SEXP milr_getMilrProb(SEXP betaSEXP, SEXP XSEXP, SEXP bagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bag(bagSEXP);
    rcpp_result_gen = Rcpp::wrap(getMilrProb(beta, X, bag));
    return rcpp_result_gen;
END_RCPP
}
// getSoftmaxBag
Rcpp::IntegerVector getSoftmaxBag(const arma::mat& X, const arma::vec& beta, const arma::vec& bag, const double& alpha);
RcppExport SEXP milr_getSoftmaxBag(SEXP XSEXP, SEXP betaSEXP, SEXP bagSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bag(bagSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(getSoftmaxBag(X, beta, bag, alpha));
    return rcpp_result_gen;
END_RCPP
}
// milr_cpp
arma::vec milr_cpp(const arma::vec& Z, const arma::mat& X, const arma::vec& bag, const arma::vec& init_beta, const double& lambda, const double& alpha, const double& maxit);
RcppExport SEXP milr_milr_cpp(SEXP ZSEXP, SEXP XSEXP, SEXP bagSEXP, SEXP init_betaSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bag(bagSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_beta(init_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(milr_cpp(Z, X, bag, init_beta, lambda, alpha, maxit));
    return rcpp_result_gen;
END_RCPP
}
// softmaxlogL
double softmaxlogL(const arma::vec& bag, const arma::mat& X, const arma::vec& Z, const arma::vec& beta, const double& alpha);
RcppExport SEXP milr_softmaxlogL(SEXP bagSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bag(bagSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(softmaxlogL(bag, X, Z, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"milr_logit", (DL_FUNC) &milr_logit, 2},
    {"milr_getLogLikMilr", (DL_FUNC) &milr_getLogLikMilr, 4},
    {"milr_getMilrProb", (DL_FUNC) &milr_getMilrProb, 3},
    {"milr_getSoftmaxBag", (DL_FUNC) &milr_getSoftmaxBag, 4},
    {"milr_milr_cpp", (DL_FUNC) &milr_milr_cpp, 7},
    {"milr_softmaxlogL", (DL_FUNC) &milr_softmaxlogL, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_milr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
